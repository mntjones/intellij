 Reference - the physical location. Any copy of the physical location still refers to the one instance of an object there
 Object - the thing the blueprint is for
 Instance - an instance of an object/an individual object
 Clsss -  blueprint for Object

 this - used to call the current class members. This is required when we have a parameter with the same name as an instance variable
 super - used to access/call the parent class members (variables and methods)


 Overloading is NOT polymorphism, but often called Compile Time Polymorphism - compiler decided on which method is called
 Overloading usually happens in a single class, but can also be considered overloaded in a subclass of that class
  - methods must have same method names
  - methods must have different parameters

 Overriding means defining a method in a child class that already exists in the parent class with the same signature (name and arguments)
 By extending the parent class, the child class gets all the methods defined in the parent class (derived methods)
 Method overriding is AKA Runtime Polymorphism and Dynamic Method Dispatch because the method that is going to be called is decided at runtime
  - only inherited methods can be overridden
  - constructors and private methods cannot be overridden
  - methods that are final cannot be overridden
  - a subclass can use super to call the superclass version of an overridden method


  Overloading                           vs.                     Overriding

  - provides functionality to reuse method name                 - Used to override a behavior which the class has inherited from the parent
    with different parameters

  - Usually in a single class, but may be in                    - Always in 2 classes that have a child-parent / IS-A relationship
    a child class

  - Must have different parameters                              - Must have the same parameters and same name

  - May have different return types                             - Must have the same return type or co-variant return type (child class)

  - May have different access modifiers (private, public, etc)  - Must NOT have a lower modifier, but may have a higher one

  - MAy throw different exceptions                              - Must NOT throw a new or broader checked exception


 Static methods:
  - uses < static > modifier
  - can't access instance methods and instance variables directly
  - usually for operations that don't require any data from an instance of the class (from "this")

 Static variables:
  - uses keyword <static>
  - every instance of that class shares the same static variable
  - if changes are made to that variable, all other instances will see the effect of the change

 Instance Variables
  - belong to an instance of a class
  - each instance has its own copy of the instance variable
  - each instance can have a different value/state


 classes auto inherits from Object class (java.lang.Object)

